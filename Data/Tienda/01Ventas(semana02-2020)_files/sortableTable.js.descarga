/*
 * Copyright (c) 2005, Oracle. All rights reserved.  
 * All rights reserved.
 *
 * Purpose - Dynamically sort an HTML Table.
 *
 * End User extension
 * ------------------
 * This file should not be modified by end users. 
 *
 * Users can alter the behaviour as follows: 
 * 
 *   Setup the following attributes:
 *    - Alternating Row Colors
 *    - Ascending/Descending Images
 *
 *   Override the default behavior for:
 *    - opSortTableGetDateValue(stringValue, columnFormat)
 *    - opSortTableGetNumberValue(stringValue, columnFormat)
 *    - opSortTableGetStringValue(stringValue, columnFormat)
 * 
 * For an example of use, select "Sort Table" in the template 
 * section of the HTML layout.   
 */
function opSortTableGetDateValue(stringValue, columnFormat)
{
  var dateValue = new Date(0);
  var numberValue = 0;

  if (stringValue.length > 0)
  {
    var dateStr = stringValue.split("-");
    if (dateStr.length == 3)
    {
      dateValue = new Date(dateStr[0] + " " + dateStr[1] + " " + dateStr[2]);
    }
  }

  numberValue = dateValue.getTime();
   
  return (isNaN(numberValue) ? 0 : numberValue);
}

function opSortTableGetNumberValue(stringValue, columnFormat)
{
  var numberValue = parseInt(stringValue);

  return (isNaN(numberValue) ? 0 : numberValue);
}

function opSortTableGetStringValue(stringValue, columnFormat)
{
  return (stringValue.toLowerCase());
}


function opSortTableFindColumnIndex(column)
{
  var columnIndex = -1;
  var rowObject = column.parentNode;;

  for (var i = 0; i < rowObject.childNodes.length; i++)
  {
    if (rowObject.childNodes[i] == column)
    {
      columnIndex = i;
      break;
    }
  }

  return (columnIndex);
}



function OpSortTable(tableToSort)
{
  this.tableToSort     = tableToSort;

  this.sortBody        = tableToSort.tBodies[0];
  this.sortHeader      = tableToSort.tHead;

  this.columnType      = null;
  this.columnFormat    = null;
  this.column          = null;
  this.columnIndex     = null;

  this.ascendingImage  = null;
  this.descendingImage = null;
  this.hideImages      = null; 

  this.evenRowColor    = null;
  this.oddRowColor     = null;

  this.getDateValue    = opSortTableGetDateValue;
  this.getNumberValue  = opSortTableGetNumberValue;
  this.getStringValue  = opSortTableGetStringValue;
}

OpSortTable.prototype.setColumn = function(column, columnType, columnFormat)
{  
  this.columnType      = columnType;
  this.columnFormat    = columnFormat;
  this.column          = column;
  this.columnIndex     = opSortTableFindColumnIndex(this.column);
}

OpSortTable.prototype.initImageHandling = function(ascendingImage, descendingImage, hideImages)
{
  this.ascendingImage  = ascendingImage;
  this.descendingImage = descendingImage;
  this.hideImages      = hideImages; 
}

OpSortTable.prototype.initRowColors = function(evenRowColor, oddRowColor)
{
  this.evenRowColor    = evenRowColor;
  this.oddRowColor     = oddRowColor;
}

OpSortTable.prototype.overrideTypeHandling = function(numberHandler, stringHandler, dateHandler)
{
  if (numberHandler) { this.getNumberValue = numberHandler; }
  if (stringHandler) { this.getStringValue = stringHandler; }
  if (dateHandler)   { this.getDateValue = dateHandler;     }
}

OpSortTable.prototype.addOrReplaceImage = function(elem, newImage)
{
  if (elem.firstChild && (elem.firstChild.tagName == 'IMG'))
  {
    elem.replaceChild(newImage, elem.firstChild);
  }
  else if (elem.firstChild)
  {
    elem.insertBefore(newImage, elem.firstChild);
  }
  else
  {
    elem.appendChild(newImage);
  }
}


OpSortTable.prototype.setImageAndOrder = function()
{
  if (this.hideImages != null)
  {
    this.hideImages.appendChild(this.ascendingImage);
    this.hideImages.appendChild(this.descendingImage);

    if ((this.column.id != null) && (this.column.id == 0))
    {
      this.addOrReplaceImage(this.column, this.ascendingImage);
    }
    else
    {
      this.addOrReplaceImage(this.column, this.descendingImage);
    }
  }

  if ((this.column.id != null) && (this.column.id == 0))
  {
    this.column.id = 1;
  }
  else
  {
    this.column.id = 0;
  }
}



OpSortTable.prototype.getElementValue = function(elem)
{
  var elemValue = '';
  for (var i = 0; i < elem.childNodes.length; i++)
  {
    switch(elem.childNodes[i].nodeType)
    {
    case 1:
      {
        elemValue += this.getElementValue(elem.childNodes[i]);
        break;
      }
    case 3:
      {
        elemValue += elem.childNodes[i].nodeValue;
        break;
      }
    }
  }

  return elemValue;
}




OpSortTable.prototype.getValueObject = function(elem)
{
  var stringValue = this.getElementValue(elem);
  var objectValue = null;

  if (this.columnType == "number")
  {
    objectValue = this.getNumberValue(stringValue, this.columnFormat);
  }
  else if (this.columnType == "date")
  {
    objectValue = this.getDateValue(stringValue, this.columnFormat);
  }
  else 
  {
    objectValue = this.getStringValue(stringValue, this.columnFormat);
  }

  return (objectValue);
}




OpSortTable.prototype.quicksort = function(columnValues, lowElement, highElement)
{
  var pivotElement, lowSwap, highSwap, tempElement;

  if (highElement - lowElement == 1)
  {
    if (columnValues[lowElement].elemObject > columnValues[highElement].elemObject)
    {
      tempElement = columnValues[lowElement];
      columnValues[lowElement] = columnValues[highElement];
      columnValues[highElement] = tempElement;
    }
  }
  else
  {
    var pivotPoint = parseInt((lowElement + highElement) / 2);

    pivotElement = columnValues[pivotPoint];
    columnValues[pivotPoint] = columnValues[lowElement];
    columnValues[lowElement] = pivotElement;

    lowSwap = lowElement + 1;
    highSwap = highElement;

    do 
    {
      while (lowSwap <= highSwap && columnValues[lowSwap].elemObject <= pivotElement.elemObject)
      {
        lowSwap++;
      }

      while (columnValues[highSwap].elemObject > pivotElement.elemObject)
      {
        highSwap--;
      }

      if (lowSwap < highSwap)
      {
        tempElement = columnValues[lowSwap];
        columnValues[lowSwap] = columnValues[highSwap];
        columnValues[highSwap] = tempElement;
      }
    } while (lowSwap < highSwap);

    columnValues[lowElement] = columnValues[highSwap];
    columnValues[highSwap] = pivotElement;


    if (lowElement < highSwap - 1)
    {
      this.quicksort(columnValues, lowElement, highSwap - 1);
    }


    if (highSwap + 1 < highElement)
    {
      this.quicksort(columnValues, highSwap + 1, highElement);
    }
  }
}


OpSortTable.prototype.columnValue = function(rowObject, elemObject)
{
  this.rowObject = rowObject;
  this.elemObject = elemObject;
}

OpSortTable.prototype.sortRows = function()
{
  var sortRows = this.sortBody.rows;
  var orderedRows = new Array();

  if (sortRows.length > 1)
  {
    for (var i = 0; i < sortRows.length; i++)
    {
      var columnValue = this.getValueObject(sortRows[i].childNodes[this.columnIndex]);
      orderedRows[i] = new this.columnValue(sortRows[i], columnValue);
    }


    this.quicksort(orderedRows, 0, orderedRows.length - 1);


    var j = (this.column.id == 1) ? 0 : orderedRows.length - 1;
    var increment = (this.column.id == 1) ? 1 : -1;

    for (var i = 0; i < orderedRows.length - 1; i++)
    {
      this.sortBody.insertBefore(orderedRows[j].rowObject, this.sortBody.rows[i]);
      j += increment;
    }
  }
}

OpSortTable.prototype.alternateRowColors = function()
{
  var sortRows = this.sortBody.rows;

  if (this.evenRowColor || this.oddRowColor)
  {
    for (var i = 0; i < sortRows.length; i++)
    {
      sortRows[i].className = (i % 2) ? this.evenRowColor : this.oddRowColor;
    }
  }
}


OpSortTable.prototype.sortByColumn = function(column, columnType, columnFormat)
{
  this.setColumn(column, columnType, columnFormat);

  if (this.columnIndex >= 0)
  {
    this.setImageAndOrder();
    this.sortRows();
    this.alternateRowColors();
  }
}
