/*
CSS Browser Selector v0.4.0 (Nov 02, 2010)
Rafael Lima (http://rafael.adm.br)
http://rafael.adm.br/css_browser_selector
License: http://creativecommons.org/licenses/by/2.5/
Contributors: http://rafael.adm.br/css_browser_selector#contributors
*/
function css_browser_selector(u){var ua=u.toLowerCase(),is=function(t){return ua.indexOf(t)>-1},g='gecko',w='webkit',s='safari',o='opera',m='mobile',h=document.documentElement,b=[(!(/opera|webtv/i.test(ua))&&/msie\s(\d)/.test(ua))?('ie ie'+RegExp.$1):is('firefox/2')?g+' ff2':is('firefox/3.5')?g+' ff3 ff3_5':is('firefox/3.6')?g+' ff3 ff3_6':is('firefox/3')?g+' ff3':is('gecko/')?g:is('opera')?o+(/version\/(\d+)/.test(ua)?' '+o+RegExp.$1:(/opera(\s|\/)(\d+)/.test(ua)?' '+o+RegExp.$2:'')):is('konqueror')?'konqueror':is('blackberry')?m+' blackberry':is('android')?m+' android':is('chrome')?w+' chrome':is('iron')?w+' iron':is('applewebkit/')?w+' '+s+(/version\/(\d+)/.test(ua)?' '+s+RegExp.$1:''):is('mozilla/')?g:'',is('j2me')?m+' j2me':is('iphone')?m+' iphone':is('ipod')?m+' ipod':is('ipad')?m+' ipad':is('mac')?'mac':is('darwin')?'mac':is('webtv')?'webtv':is('win')?'win'+(is('windows nt 6.0')?' vista':''):is('freebsd')?'freebsd':(is('x11')||is('linux'))?'linux':'','js']; c = b.join(' '); h.className += ' '+c; return c;}; css_browser_selector(navigator.userAgent);



var fixes={
	
	fix:function(){
		return "<div class='fix sp png'>&nbsp;</div>";
	},
	fondoCuerpoPral:function(){
	
		var layouts = jQuery("body > table");		
		var len = layouts.length;
		for(var i = 3; i < len; i++) layouts.eq(i).addClass("fondo"); 		
	
	},
	
	home:{
		sepUltimosAvisos:function(){
		
			var obj = jQuery("#ultimosAvisos");
			if(obj.find("tr").length <= 1) obj.addClass("sep");
		
		}
	
	},
	
	aplicaciones:{	
		tabs:function(){
			var tb = $(".tabs");			
			var objs = tb.find("li");			
			tb.find(".sel").removeClass();						
			objs.eq(itemAppSel).addClass("sel");									
		}	
	},
	
	cebreadoFilas:function(){
	
		var obj = jQuery("table.tipo1, table.tablaTipoBilletes, table.tablaEstadistica, table.tableNoticias");		
		obj.find("tbody tr:odd").addClass("alt");
	
	},
	centradoGraficos:function(){
	
		var txtGraph = $(".stlOmniGrafico");
		txtGraph.parents("table").find("img").css({"display":"block", "margin":"0 auto"})
	
	}
	
	
	
	
}


var breadCrumb = {
	meses:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],
	init:function(){
	
		var obj = jQuery("#breadCrumb");
		var wrap = obj.find(".clearFix");
		var d = new Date();		
		wrap.empty();
		if(navBar.migas != ""){			
			wrap.append(jQuery("<ol>"+navBar.migas+"</ol>"));
		}
		
		wrap.append(jQuery("<span class='date'>"+d.getDate() + " de " + this.meses[d.getMonth()] + " de " + d.getFullYear()+"</span>"));
		

	
	}


}


var navBar = {
	offsetLeftFirstLevel:0,
	migas:"",
	init:function(){
		var obj = jQuery("#navBar");	
		//jQuery.getJSON('/pls/portallae/stl_menu.menu_json', function(data) {						
		var data =  jQuery.parseJSON(menu_contenido); // la variable menu_contenido se genera en un documento aparte en la propia página
				obj.empty();		
				if(data.length != 0){ // controlar caso devuelto []
					var menu = navBar.generaMenu(data);						
					obj.append(jQuery(menu));		
					this.firstLevel = obj.find("ul:first");
					if(itemSel >= 0){
						this.firstLevel.children("li").eq(itemSel).addClass("current");				
						if( typeof data[itemSel] !== "undefined" ) { // por si el menu_id no existe o es incorrecto
							navBar.migas = navBar.generaBread(data[itemSel]);
						}
					}										
					var elementosConHijos = obj.find(".hasChildren");
					var picosSeleccion = elementosConHijos.find(".fix");
					if(picosSeleccion.length == 0) elementosConHijos.append(fixes.fix()); // los picos solo los añadimos una vez al menu de navegacion
					if(("#breadCrumb").length != 0)  breadCrumb.init();
		
		    		obj.find("li").hover(
		    			function(){
		    				var that = jQuery(this);
		    				var ul = jQuery('ul:first',that);
		    				var currentLevel = that.parents("ul").length; // si 1 -> 1º nivel, si 2 -> 2º nivel...
		    	    		if(currentLevel == 1 && that.find("ul").length != 0) that.find("a:first").addClass("mainHov"); // si estoy en el primer nivel y tengo hijos
		    	    		navBar.revisaPosicion(ul,currentLevel);
				        	ul.show();
		    			}, 
				    	function(){
		    		    	jQuery(this).find("a:first").removeClass("mainHov");
		    	    		jQuery('ul:first',this).hide();
		    			}
		    		);
		    	}

					
		//}) 
				
	},
	generaMenu:function(m){
	
		var men = "<ul>",
			len = m.length,
			aux, hijos, hijosLen;				
		for(var i = 0; i < len; i++){
		    aux = m[i];
		    hijos = aux.items;		    
		    hijosLen = hijos.length;
		    men += "<li>";
		    if(hijosLen == 0){
		    	men += "<a href='"+aux.href+"'>"+aux.texto+"</a>";		
		    }else{
		    	men += "<a href='javascript:void(null)' class='noCur'>"+aux.texto+"</a>";
		    }
		       		    
		    if(hijosLen >= 1){
		    	men += navBar.generaMenu(hijos);
		    }
		    men += "</li>";
		}
		men += "</ul>";
		return men;
		
	},
	
	generaBread:function(m){
		var len, rama, hijos, aux;				
		if(m.menu_id != menu_id){
		    hijos = m.items;
		    len = hijos.length;		    
		    for(var i = 0; i < len; i++){
		        rama = hijos[i];
		        aux = navBar.generaBread(rama);
		        if(aux != false){		    			
		        	return "<li><span>"+m.texto+"</span></li>" + aux;
		        }
		    }	
		    return false;	
		  
		}else{
		    return "<li class='reset'><span>"+m.texto+"</span></li>";
		}					
						
	},	
	
	revisaPosicion:function(obj,currentLevel){
		var $u = obj;
	 	var $w = jQuery(window);
	 	var wWidth = $w.width();
	 	var uWidth = $u.width();
	 	var anchoMostrado = 0, aux = 0;
	 	var numNivelesLeng = $u.parents("ul").length;	 	
	 	$u.css('display','block');	 	 	
	 	anchoMostrado = $u.width() * numNivelesLeng // los menús miden siempre un ancho fijo. Multiplicamos éste por el número de padres 
	 	if(currentLevel == 1 && numNivelesLeng != 0) this.offsetLeftFirstLevel = parseInt($u.offset().left); // cojo la coordenada x del elemento de primer nivel seleccionado
	 	
	 	if((this.offsetLeftFirstLevel + anchoMostrado) > wWidth){ // nos pasamos de la ventana. Movemos el menú de una manera u otra según nivel donde estemos
	 		if(currentLevel == 1){
	 			$u.css("left",-($u.parent().width()/2)+"px");
	 		}else{
	 			$u.css("right",(uWidth)+"px");
	 		}
	 	} 
	 	
	 	
	}
}


var behaviours = {

	albaranes:{	
		init:function(){		
			var blocks = jQuery(".collapse");			
			var titles = blocks.find(".clearFix a"), that, next, img;			
			titles.bind("click",function(e){
				that = jQuery(this);
				next = that.parent().next();
				img = that.find("img");
				next.toggle();
				if(next.is(":visible")){
					img.attr("src", "imgs/ico_menos.png");
				}else{
					img.attr("src", "imgs/ico_mas.png");
				}
				e.preventDefault();
				e.stopPropagation();			
			})						
		},
		muestraContenidos:function(Agno, Sorteo, contador, obj){			 				
				jQuery.ajax({
  					url: '/pls/portallae/STL_ALBARANES.MOSTRAR_ALBARAN?pctAgno=' + Agno + '&pctSorteo=' + Sorteo,
  					type: 'get',  					  					
  					dataType: "html",
  					success: function(data){  					
  						var aux = jQuery('#AlbContenido' + contador);
  						aux.empty();
  						aux.html($(data));  					
  						that = jQuery(obj);
						next = that.parent().next();
						img = that.find("img");
						next.toggle();
						if(next.is(":visible")){
							img.attr("src", "/imgs/ico_menos.png");
						}else{
							img.attr("src", "/imgs/ico_mas.png");
						}
  					},  					
  					error:function(){  					
  						alert("Problemas con la peticion Ajax.");
  					  					
  					}
				});					                    			 
		}         	
	},
	datosEconomicos:{
	
		iva:{			
			muestraContenido:function(p_receptor){
				jQuery.ajax({
  					url: '/pls/pubprtll/stl_busca_docs.mostrarivarec?p_receptor=' + p_receptor,
  					type: 'get',  					  					
  					dataType: "html",
  					success: function(data){  					
  						var aux = $("#contenidobusquedaiva");
  						aux.empty();
  						aux.html($(data));
  						aux.show();  						  						
  					},  					
  					error:function(){  					
  						alert("Problemas con la peticion Ajax.");  					  					
  					}
				});		
			}			
		},
		ingreso:{			
			muestraContenido:function(p_receptor){
				jQuery.ajax({
  					url: '/pls/pubprtll/stl_busca_docs.mostraringresorec?p_receptor=' + p_receptor,
  					type: 'get',  					  					
  					dataType: "html",
  					success: function(data){  					
  						var aux = $("#contenidobusquedaingreso");
  						aux.empty();
  						aux.html($(data));
  						aux.show();  						  						
  					},  					
  					error:function(){  					
  						alert("Problemas con la peticion Ajax.");  					  					
  					}
				});	
			}
		},
		albaran:{			
			muestraContenido:function(p_sorteo, p_anio, p_receptor){
				jQuery.ajax({
  					url: '/pls/pubprtll/STL_BUSCA_DOCS.MOSTRARALBARANREC?p_sorteo=' + p_sorteo + '&p_anio=' + p_anio + '&p_receptor=' + p_receptor,
  					type: 'get',  					  					
  					dataType: "html",
  					success: function(data){  					
  						var aux = $("#contenidobusquedaalbaran");
  						aux.empty();
  						aux.html($(data));
  						aux.show();  						  						
  					},  					
  					error:function(){  					
  						alert("Problemas con la peticion Ajax.");  					  					
  					}
				});				
			}
		},
		irpf:{			
			muestraContenido:function(p_receptor){
				jQuery.ajax({
  					url: '/pls/pubprtll/STL_BUSCA_DOCS.MOSTRARIRPFREC?p_receptor=' + p_receptor,
  					type: 'get',  					  					
  					dataType: "html",
  					success: function(data){  					
  						var aux = $("#contenidobusquedairpf");
  						aux.empty();
  						aux.html($(data));
  						aux.show();  						  						
  					},  					
  					error:function(){  					
  						alert("Problemas con la peticion Ajax.");  					  					
  					}
				});	
			
			}
		},
		liqfact:{			
			muestraContenido:function(p_semana, p_anio, p_receptor){
				jQuery.ajax({
  					url: '/pls/pubprtll/STL_BUSCA_LIQ_FACT.BUSCARLIQFACTREC?p_semana=' + p_semana + '&p_anio=' + p_anio + '&p_receptor=' + p_receptor,
  					type: 'get',  					  					
  					dataType: "html",
  					success: function(data){  					
  						var aux = $("#contenidobusquedaliqfact");
  						aux.empty();
  						aux.html($(data));
  						aux.show();  						  						
  					},  					
  					error:function(){  					
  						alert("Problemas con la peticion Ajax.");  					  					
  					}
				});				
			}
		}    		
	}

}

var lightbox = {

	toReload:false,
	init:function(){

		var b = jQuery("body"), 					
					lightboxes = jQuery(".fancy");		
							
		lightboxes.each(function(idx){		
			
			$(this).fancybox({		
				'speedIn'		:	600, 
				'speedOut'		:	200,
				'maxWidth'		:  800,
				'maxHeight'		: 	600,
				'padding'		: 0,
				'modal': false,
				'centerOnScroll':true,			
				'type':'iframe',
				'scrolling': 'auto',
				beforeShow: function(){
					b.css("position","static");				
				},
				afterClose: function(){				
					// si cerramos un lightbox que se ha abierto desde "ver mas avisos" o si hemos pulsado en un "ver aviso"					
					if( lightboxes.eq(idx).hasClass("avisos") || lightbox.toReload) { 					
						document.location.reload();						
					}
					b.css("position","relative");	
					jQuery("#fancybox-overlay").hide();			
					lightboxes.toReload = false;
				},
				onComplete: function(){
					$.fancybox.resize();
				}

			});
						
		})
										
	}

}

//Funciones de uso habitual en eSTILA

function htmlentities (string, quote_style) {
    // http://kevin.vanzonneveld.net
    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: nobbler
    // +    tweaked by: Jack
    // +   bugfixed by: Onno Marsman
    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +    bugfixed by: Brett Zamir (http://brett-zamir.me)
    // +      input by: Ratheous
    // -    depends on: get_html_translation_table
    // *     example 1: htmlentities('Kevin & van Zonneveld');
    // *     returns 1: 'Kevin &amp; van Zonneveld'
    // *     example 2: htmlentities("foo'bar","ENT_QUOTES");
    // *     returns 2: 'foo&#039;bar'

    var hash_map = {}, symbol = '', tmp_str = '', entity = '';
    tmp_str = string.toString();
    
    if (false === (hash_map = this.get_html_translation_table('HTML_ENTITIES', quote_style))) {
        return false;
    }
    hash_map["'"] = '&#039;';
    for (symbol in hash_map) {
        entity = hash_map[symbol];
        tmp_str = tmp_str.split(symbol).join(entity);
    }
    
    return tmp_str;
}

function get_html_translation_table (table, quote_style) {
    // http://kevin.vanzonneveld.net
    // +   original by: Philip Peterson
    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: noname
    // +   bugfixed by: Alex
    // +   bugfixed by: Marco
    // +   bugfixed by: madipta
    // +   improved by: KELAN
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)
    // +      input by: Frank Forte
    // +   bugfixed by: T.Wild
    // +      input by: Ratheous
    // %          note: It has been decided that we're not going to add global
    // %          note: dependencies to php.js, meaning the constants are not
    // %          note: real constants, but strings instead. Integers are also supported if someone
    // %          note: chooses to create the constants themselves.
    // *     example 1: get_html_translation_table('HTML_SPECIALCHARS');
    // *     returns 1: {'"': '&quot;', '&': '&amp;', '<': '&lt;', '>': '&gt;'}
    
    var entities = {}, hash_map = {}, decimal = 0, symbol = '';
    var constMappingTable = {}, constMappingQuoteStyle = {};
    var useTable = {}, useQuoteStyle = {};
    
    // Translate arguments
    constMappingTable[0]      = 'HTML_SPECIALCHARS';
    constMappingTable[1]      = 'HTML_ENTITIES';
    constMappingQuoteStyle[0] = 'ENT_NOQUOTES';
    constMappingQuoteStyle[2] = 'ENT_COMPAT';
    constMappingQuoteStyle[3] = 'ENT_QUOTES';

    useTable       = !isNaN(table) ? constMappingTable[table] : table ? table.toUpperCase() : 'HTML_SPECIALCHARS';
    useQuoteStyle = !isNaN(quote_style) ? constMappingQuoteStyle[quote_style] : quote_style ? quote_style.toUpperCase() : 'ENT_COMPAT';

    if (useTable !== 'HTML_SPECIALCHARS' && useTable !== 'HTML_ENTITIES') {
        throw new Error("Table: "+useTable+' not supported');
        // return false;
    }

    entities['38'] = '&amp;';
    if (useTable === 'HTML_ENTITIES') {
        entities['160'] = '&nbsp;';
        entities['161'] = '&iexcl;';
        entities['162'] = '&cent;';
        entities['163'] = '&pound;';
        entities['164'] = '&curren;';
        entities['165'] = '&yen;';
        entities['166'] = '&brvbar;';
        entities['167'] = '&sect;';
        entities['168'] = '&uml;';
        entities['169'] = '&copy;';
        entities['170'] = '&ordf;';
        entities['171'] = '&laquo;';
        entities['172'] = '&not;';
        entities['173'] = '&shy;';
        entities['174'] = '&reg;';
        entities['175'] = '&macr;';
        entities['176'] = '&deg;';
        entities['177'] = '&plusmn;';
        entities['178'] = '&sup2;';
        entities['179'] = '&sup3;';
        entities['180'] = '&acute;';
        entities['181'] = '&micro;';
        entities['182'] = '&para;';
        entities['183'] = '&middot;';
        entities['184'] = '&cedil;';
        entities['185'] = '&sup1;';
        entities['186'] = '&ordm;';
        entities['187'] = '&raquo;';
        entities['188'] = '&frac14;';
        entities['189'] = '&frac12;';
        entities['190'] = '&frac34;';
        entities['191'] = '&iquest;';
        entities['192'] = '&Agrave;';
        entities['193'] = '&Aacute;';
        entities['194'] = '&Acirc;';
        entities['195'] = '&Atilde;';
        entities['196'] = '&Auml;';
        entities['197'] = '&Aring;';
        entities['198'] = '&AElig;';
        entities['199'] = '&Ccedil;';
        entities['200'] = '&Egrave;';
        entities['201'] = '&Eacute;';
        entities['202'] = '&Ecirc;';
        entities['203'] = '&Euml;';
        entities['204'] = '&Igrave;';
        entities['205'] = '&Iacute;';
        entities['206'] = '&Icirc;';
        entities['207'] = '&Iuml;';
        entities['208'] = '&ETH;';
        entities['209'] = '&Ntilde;';
        entities['210'] = '&Ograve;';
        entities['211'] = '&Oacute;';
        entities['212'] = '&Ocirc;';
        entities['213'] = '&Otilde;';
        entities['214'] = '&Ouml;';
        entities['215'] = '&times;';
        entities['216'] = '&Oslash;';
        entities['217'] = '&Ugrave;';
        entities['218'] = '&Uacute;';
        entities['219'] = '&Ucirc;';
        entities['220'] = '&Uuml;';
        entities['221'] = '&Yacute;';
        entities['222'] = '&THORN;';
        entities['223'] = '&szlig;';
        entities['224'] = '&agrave;';
        entities['225'] = '&aacute;';
        entities['226'] = '&acirc;';
        entities['227'] = '&atilde;';
        entities['228'] = '&auml;';
        entities['229'] = '&aring;';
        entities['230'] = '&aelig;';
        entities['231'] = '&ccedil;';
        entities['232'] = '&egrave;';
        entities['233'] = '&eacute;';
        entities['234'] = '&ecirc;';
        entities['235'] = '&euml;';
        entities['236'] = '&igrave;';
        entities['237'] = '&iacute;';
        entities['238'] = '&icirc;';
        entities['239'] = '&iuml;';
        entities['240'] = '&eth;';
        entities['241'] = '&ntilde;';
        entities['242'] = '&ograve;';
        entities['243'] = '&oacute;';
        entities['244'] = '&ocirc;';
        entities['245'] = '&otilde;';
        entities['246'] = '&ouml;';
        entities['247'] = '&divide;';
        entities['248'] = '&oslash;';
        entities['249'] = '&ugrave;';
        entities['250'] = '&uacute;';
        entities['251'] = '&ucirc;';
        entities['252'] = '&uuml;';
        entities['253'] = '&yacute;';
        entities['254'] = '&thorn;';
        entities['255'] = '&yuml;';
    }

    if (useQuoteStyle !== 'ENT_NOQUOTES') {
        entities['34'] = '&quot;';
    }
    if (useQuoteStyle === 'ENT_QUOTES') {
        entities['39'] = '&#39;';
    }
    entities['60'] = '&lt;';
    entities['62'] = '&gt;';


    // ascii decimals to real symbols
    for (decimal in entities) {
        symbol = String.fromCharCode(decimal);
        hash_map[symbol] = entities[decimal];
    }
    
    return hash_map;
}


function limitText(limitField, limitNum) {
 if (limitField.value.length > limitNum) {
  limitField.value = limitField.value.substring(0, limitNum);
 } 
}
//FUNCIONES Y PROCEDIMIENTOS COMUNES EN LOS PORTLET's
//busca caracteres que no sean espacio en blanco en una cadena
function vacio(q) {
        for ( i = 0; i < q.length; i++ ) {
                if ( q.charAt(i) != " " ) {
                        return false
                }
        }
        return true
}
//funcion que devuelve true si el parametro pasado es un numero y 
//false en caso contrario
function IsNum( numstr ) {
// Indica si un número es un entero válido. 
var isValid = true;
if (numstr+"" == "undefined" || numstr+"" == "null" || numstr+"" == "") 
return false; 
// convertir a string para poder realizar comparaciones de string. 
numstr += ""; 
for (i = 0; i < numstr.length; i++) {
  if (!((numstr.charAt(i) >= "0") && (numstr.charAt(i) <= "9") )) {
  isValid = false;
  break;
  } 
} // END for 
return isValid;
}

//comprueba que la longitud del valor del campo se corresponda con el 
//valor del parametro longitud
function Longitud(valorcampo, longitud) {
 var longitudCampo = valorcampo.length;
var correcto = true;
if (longitudCampo != longitud) {
   correcto = false;
}
return correcto;
} 

//Elimina espacios en blanco por delante y por detras
function trim(stringToTrim) {
	return stringToTrim.replace(/^\s+|\s+$/g,"");
}
//Elimina espacios en blanco por delante
function ltrim(stringToTrim) {
	return stringToTrim.replace(/^\s+/,"");
}
//Elimina espacios en blanco por detras
function rtrim(stringToTrim) {
	return stringToTrim.replace(/\s+$/,"");
}




jQuery(document).ready(function() {	

	if(jQuery(".fancy").length != 0) lightbox.init();
	navBar.init();
	fixes.fondoCuerpoPral();		
	if(jQuery("#ultimosAvisos").length != 0) fixes.home.sepUltimosAvisos();
	//if(jQuery(".collapse").length != 0) behaviours.albaranes.init();
	if(jQuery("table.tipo1").length != 0 || jQuery("table.tablaTipoBilletes").length != 0 || jQuery("table.tablaEstadistica").length != 0 || jQuery("table.tableNoticias").length != 0) fixes.cebreadoFilas();
	if(jQuery("#aplicaciones.tabs").length != 0) fixes.aplicaciones.tabs();
	if(jQuery(".stlOmniGrafico").length != 0) fixes.centradoGraficos();

})


// IFA: Cookies
// http://www.quirksmode.org/js/cookies.html
function createCookie(name,value,days) {
	if (days) {
		var date = new Date();
		date.setTime(date.getTime()+(days*24*60*60*1000));
		var expires = "; expires="+date.toGMTString();
	}
	else var expires = "";
	document.cookie = name+"="+value+expires+"; path=/";
}

function readCookie(name) {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for(var i=0;i < ca.length;i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
	}
	return null;
}

function eraseCookie(name) {
	createCookie(name,"",-1);
}
